Script started on 2020-01-14 16:50:55-0500
t02$ gdb overfloq[Kw
GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) list
1	#include <stdio.h>
2	
3	#define SIZE 4
4	#define OVERFLOW 5
5	
6	int main() {
7	    int index = 0;
8	    int i;
9	    int before[SIZE] = {10, 10, 10, 10};
10	    int a[SIZE] = {0, 0, 0, 0};
(gdb) list
11	    int after[SIZE] = {10, 10, 10, 10};
12	
13	    printf("Address of the variables:\n");
14	    for (index = 0; index < SIZE; index++) {
15	        printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
16	    }
17	    for (index = 0; index < SIZE; index++) {
18	        printf("%lx -> &a[%d]\n", (unsigned long) &a[index], index);
19	    }
20	    for (index = 0; index < SIZE; index++) {
(gdb) break 11[K4
Breakpoint 1 at 0x7b8: file overflow.c, line 14.
(gdb) run
Starting program: /student/poojaryr/209_repo/t02/overflow 
Address of the variables:

Breakpoint 1, main () at overflow.c:14
14	    for (index = 0; index < SIZE; index++) {
(gdb) next
15	        printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
(gdb) 
7fffffffe720 -> &after[0]
14	    for (index = 0; index < SIZE; index++) {
(gdb) 
15	        printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
(gdb) 
7fffffffe724 -> &after[1]
14	    for (index = 0; index < SIZE; index++) {
(gdb) print &(after[0])
$1 = (int *) 0x7fffffffe720
(gdb) print &(after[0])[1P0])[0])[C[1P])4])[C[1P[4])[1P[4])[1P[4])[1P[4])[C[C[C[C
$2 = (int *) 0x7fffffffe720
(gdb) quit
A debugging session is active.

	Inferior 1 [process 29745] will be killed.

Quit anyway? (y or n) y
t02$ exit
exit

Script done on 2020-01-14 17:06:33-0500
